var Fastable=function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fastable=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),a=r(1);var o=t.Fastable=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tables={}}return n(e,[{key:"safeTable",value:function(e,t,r){var n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if(void 0!==r&&null!==r&&Array.isArray(r)&&this.areObjsEqual(r)){var a=document.getElementById(e);void 0!==r&&null!==r&&(r=n?this.encodeEntries(r):r,this.tableRender(t,a,r))}}},{key:"areObjsEqual",value:function(e){var t=JSON.stringify(Object.keys(e[0]).sort()),r=!0,n=!1,a=void 0;try{for(var o,i=e[Symbol.iterator]();!(r=(o=i.next()).done);r=!0){var l=o.value;if(JSON.stringify(Object.keys(l).sort())!=t)return!1}}catch(e){n=!0,a=e}finally{try{!r&&i.return&&i.return()}finally{if(n)throw a}}return!0}},{key:"encodeEntries",value:function(e){var t=!0,r=!1,n=void 0;try{for(var o,i=e[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var l=o.value;for(var u in l)l.hasOwnProperty(u)&&"string"==typeof l[u]&&(l[u]=(0,a.sanitizeText)(l[u]))}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}return e}},{key:"tableRender",value:function(e,t,r){var n=document.createElement("table");n.setAttribute("id",e);var a=Object.keys(r[0]),o=!0,i=!1,l=void 0;try{for(var u,c=a[Symbol.iterator]();!(o=(u=c.next()).done);o=!0){var f=u.value,d=document.createElement("th"),y=document.createTextNode(f);d.appendChild(y),n.appendChild(d)}}catch(e){i=!0,l=e}finally{try{!o&&c.return&&c.return()}finally{if(i)throw l}}var s=!0,v=!1,p=void 0;try{for(var b,h=r[Symbol.iterator]();!(s=(b=h.next()).done);s=!0){var m=b.value,g=document.createElement("tr"),O=!0,x=!1,j=void 0;try{for(var S,E=a[Symbol.iterator]();!(O=(S=E.next()).done);O=!0){var w=S.value,_=document.createElement("td"),k=document.createTextNode(m[w]);_.appendChild(k),g.appendChild(_)}}catch(e){x=!0,j=e}finally{try{!O&&E.return&&E.return()}finally{if(x)throw j}}n.appendChild(g)}}catch(e){v=!0,p=e}finally{try{!s&&h.return&&h.return()}finally{if(v)throw p}}t.appendChild(n),this.tables[e]=document.getElementById(e)}},{key:"getTables",value:function(){return this.tables}}]),e}();e.exports=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sanitizeText=function(e){return e.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\//g,"&#x2F;")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,